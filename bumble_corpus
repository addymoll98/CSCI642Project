from math import prod
import os, os.path
import string
import nltk, string, re
from nltk import FreqDist, NaiveBayesClassifier, classify
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.corpus.reader import CategorizedPlaintextCorpusReader
import random

bumble=CategorizedPlaintextCorpusReader('C:/Users/addym/AppData/Roaming/nltk_data/corpora/bumble',  \
                                 '.*', \
                                 cat_pattern=r'(.*)[/]')

print(bumble.categories())

documents = []

for category in bumble.categories():
	for fileid in bumble.fileids(category):
		documents.append((bumble.words(fileid), category))
		

all_words = [word.lower() for word in bumble.words()]

stopwords_english = stopwords.words('english')

all_words_clean = []
for word in all_words:
	if word not in stopwords_english and word not in string.punctuation:
		all_words_clean.append(word)

all_words_frequency = FreqDist(all_words_clean)

most_common_words = all_words_frequency.most_common(2000)

word_features = [item[0] for item in most_common_words]

def document_features(document):
	document_words = set(document)
	features = {}
	for word in word_features:
		features['contains(%s)' % word] = (word in document_words)
	return features

feature_set = [(document_features(doc), category) for (doc, category) in documents]
random.shuffle(feature_set)

train_set = feature_set[400:]
test_set = feature_set[:400]

classifier = NaiveBayesClassifier.train(train_set)


#accuracy
accuracy = classify.accuracy(classifier,test_set)
print(accuracy)

app_func=[]
app_func=[0 for i in range(3)]
cust_serv=[]
cust_serv=[0 for i in range(3)]
prod_sat=[]
prod_sat=[0 for i in range(3)]




for document in test_set:
	x,y=document
	if y=="app_func":
		i=0
	elif y=="cust_serv":
		i=1
	elif y=="prod_sat":
		i=2
	this_class=classifier.classify(x)
	if this_class=="app_func":
		app_func[i]=app_func[i]+1
	elif this_class=="cust_serv":
		cust_serv[i]=cust_serv[i]+1
	elif this_class=="prod_sat":
		prod_sat[i]=prod_sat[i]+1

print(app_func)
print(cust_serv)
print(prod_sat)
